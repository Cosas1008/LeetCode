/*
"completely removing it and any connections from this node to any other node"
*/
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        parents.resize(n, 0x0);
        for(int i = 0; i < n; i++) parents[i] = i;

        vector<int> clean;
        set<int> sinitial(initial.begin(), initial.end());
        for(int i = 0; i < n; i++){
            if(!sinitial.count(i)) clean.push_back(i); // get non-malware nodes
        }
        // union find
        for(int i : clean)
            for(int j : clean)
                if(i != j && graph[i][j])
                    parents[find(i)] = find(j);

        // size of each group
        vector<int> area(n, 0);
        for(int c : clean)
            area[find(c)]++;

        map<int, set<int>> infect_node;
        map<int, int> infect_count; // don't need
        for(int i : initial){
            for(int j : clean){
                if(graph[i][j]) infect_node[i].insert(find(j));
            }
            for(int j : infect_node[i]){
                infect_count[j]++;
            }
        }

        int ans, max_cnt = 0;
        // Remove each malware node
        for(auto [malware, nodes] : infect_node){
            int count = 0;
            // set of nodes
            for(auto& node : nodes){
                if(infect_node[node] == 1)
                    count += area[node];
            }
            if(count > max_cnt || (count >= max_cnt && malware < ans)){
                max_cnt = count;
                ans = malware;
            }
        }
        return ans;
    }
    int find(int x){
        if(parents[x] != x)
            parents[x] = find(parents[x]);
        return parents[x];
    }
private:
    vector<int> parents;
};